name: Build and Release

on:
  push:
    tags: "v*"

jobs:
  build_wheels:
    name: Build wheel 🛞
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        buildplat:
          - [ubuntu-latest, manylinux_x86_64]
          - [macos-14, macosx_arm64]
          - [macos-13, macosx_x86_64]
        python:
          - ["cp310", "3.10"]
          - ["cp311", "3.11"]
          - ["cp312", "3.12"]
      runs-on: ${{ matrix.buildplat[0] }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v3
      - name: Setup micromamba
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-name: pyensmallen
          init-shell: bash
          generate-run-shell: true
          create-args: >-
            --no-deps
            libarmadillo
            ensmallen

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.19.0
        env:
          # Linux build is fully self-contained, so extra care is needed.
          # The host file system is mounted as /host (https://cibuildwheel.pypa.io/en/stable/faq/).
          # We can access MAMBA_ROOT_PREFIX of host for the conda environment.
          CIBW_ENVIRONMENT_LINUX: MAMBA_ROOT_PREFIX="/host/home/runner/micromamba"
          CIBW_BUILD: ${{ matrix.python[0] }}-${{ matrix.buildplat[1] }}
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.python[0] }}-${{ matrix.buildplat[1] }}
          path: wheelhouse/*.whl

  build-sdist:
    name: Build source 🛈
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v3
      - name: Build sdist
        run: |
          python -m pip install -U pip build
          python -m build --sdist
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*

  publish-to-pypi:
    name: >-
      Publish Python 🐍 distribution 📦 to PyPI
    needs:
      - build-wheel
      - build-sdist
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/pyensmallen
    permissions:
      id-token: write # IMPORTANT: mandatory for trusted publishing

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          path: dist/
          merge-multiple: true
      - name: Publish distribution 📦 to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  github-release:
    name: >-
      Sign the Python 🐍 distribution 📦 with Sigstore
      and upload them to GitHub Release
    needs:
      - publish-to-pypi
    runs-on: ubuntu-latest

    permissions:
      contents: write # IMPORTANT: mandatory for making GitHub Releases
      id-token: write # IMPORTANT: mandatory for sigstore

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          path: dist/
          merge-multiple: true
      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v2.1.1
        with:
          inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release create
          '${{ github.ref_name }}'
          --repo '${{ github.repository }}'
          --notes ""
      - name: Upload artifact signatures to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        # Upload to GitHub Release using the `gh` CLI.
        # `dist/` contains the built packages, and the
        # sigstore-produced signatures and certificates.
        run: >-
          gh release upload
          '${{ github.ref_name }}' dist/**
          --repo '${{ github.repository }}'
